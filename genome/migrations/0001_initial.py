# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-04-18 07:27
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import genome.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('metadata', '0001_initial'),
        ('dataset', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Interval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today, verbose_name='Creation date')),
                ('modification_date', models.DateField(default=datetime.date.today, verbose_name='Modification date')),
                ('start', models.PositiveIntegerField(default=None, validators=[django.core.validators.MinValueValidator(1, message='The minimum starting positive is 1.')], verbose_name='Start')),
                ('end', models.PositiveIntegerField(default=None, validators=[django.core.validators.MinValueValidator(1, message='The minimum starting positive is 1.')], verbose_name='End (inclusive)')),
                ('chromosome', models.CharField(default=None, max_length=32, validators=[genome.validators.validate_chromosome], verbose_name='Chromosome identifier')),
                ('strand', models.CharField(choices=[('F', 'Forward'), ('R', 'Reverse')], default=None, max_length=1, validators=[genome.validators.validate_strand], verbose_name='Strand')),
            ],
            options={
                'verbose_name': 'Reference interval',
                'verbose_name_plural': 'Reference intervals',
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceGenome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today, verbose_name='Creation date')),
                ('modification_date', models.DateField(default=datetime.date.today, verbose_name='Modification date')),
                ('short_name', models.CharField(default=None, max_length=256, validators=[genome.validators.validate_genome_short_name], verbose_name='Name')),
                ('species_name', models.CharField(default=None, max_length=256, validators=[genome.validators.validate_species_name], verbose_name='Species')),
                ('ensembl_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='associated_referencegenomes', to='metadata.EnsemblIdentifier', verbose_name='Ensembl identifier')),
                ('refseq_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='associated_referencegenomes', to='metadata.RefseqIdentifier', verbose_name='RefSeq identifier')),
            ],
            options={
                'verbose_name': 'Reference Genome',
                'verbose_name_plural': 'Reference Genomes',
                'ordering': ['short_name'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today, verbose_name='Creation date')),
                ('modification_date', models.DateField(default=datetime.date.today, verbose_name='Modification date')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary')),
                ('genome', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='associated_reference_maps', to='genome.ReferenceGenome', verbose_name='Reference genome')),
            ],
            options={
                'verbose_name': 'ReferenceMap',
                'verbose_name_plural': 'Annotations',
            },
        ),
        migrations.CreateModel(
            name='TargetGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today, verbose_name='Creation date')),
                ('modification_date', models.DateField(default=datetime.date.today, verbose_name='Modification date')),
                ('name', models.CharField(default=None, max_length=256, validators=[genome.validators.validate_gene_name], verbose_name='Target name')),
                ('ensembl_id', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='associated_targetgenes', to='metadata.EnsemblIdentifier')),
                ('refseq_id', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='associated_targetgenes', to='metadata.RefseqIdentifier')),
                ('scoreset', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='target', to='dataset.ScoreSet')),
                ('uniprot_id', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='associated_targetgenes', to='metadata.UniprotIdentifier')),
            ],
            options={
                'verbose_name': 'Target Gene',
                'verbose_name_plural': 'Target Genes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WildTypeSequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today, verbose_name='Creation date')),
                ('modification_date', models.DateField(default=datetime.date.today, verbose_name='Modification date')),
                ('sequence', models.TextField(default=None, validators=[genome.validators.validate_wildtype_sequence], verbose_name='Wild-type sequence')),
            ],
            options={
                'verbose_name': 'Wild-type sequence',
                'verbose_name_plural': 'Wild-type sequences',
            },
        ),
        migrations.AddField(
            model_name='targetgene',
            name='wt_sequence',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='target', to='genome.WildTypeSequence', verbose_name='Wild-type Sequence'),
        ),
        migrations.AddField(
            model_name='referencemap',
            name='target',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='reference_maps', to='genome.TargetGene', verbose_name='Target'),
        ),
        migrations.AddField(
            model_name='interval',
            name='reference_map',
            field=models.ForeignKey(default=None, null=None, on_delete=django.db.models.deletion.CASCADE, related_name='intervals', to='genome.ReferenceMap'),
        ),
    ]
